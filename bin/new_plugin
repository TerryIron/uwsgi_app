#!/bin/bash


function new_plugin() {
    local plugin_name="$1"
    local plugin_path="$2"
    local plugin_type="$3"
    local plugin_ver="$4"
    local old_pwd=$(pwd)
    local split="_"

    cd $plugin_path
    mkdir -p $plugin_type$split$plugin_name
    cd $plugin_type$split$plugin_name

cat >> __init__.py << EOF
EOF
cat >> requirements.txt << EOF
EOF
cat >> README.md<< EOF
# $plugin_name README

## Actions(支持操作)

* start(开始)
\`\`\`
    配置参数：
    arg:logger.path=配置日志文件
\`\`\`

* stop(结束)
\`\`\`
    配置参数：
    arg:logger.path=配置日志文件
\`\`\`
EOF
cat >> app.py << EOF
#!/usr/bin/env python                                                                                                                                                             
# -*- coding: utf-8 -*-

import logging


class Application(object):

    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def set_logger(self, logger):
        self.logger = logger


APP = None
CONFIG = {}


def init():
    global APP
    APP = Application()
    CONFIG['logger.path'] = '/tmp/$plugin_name.log'


def start(loader, **kwargs):
    return {'result': {}, 'data': {}}


def stop(loader, **kwargs):
    return {'result': {}, 'data': {}}
EOF
cat >> app.json << EOF
{
    "version": "$plugin_ver",
    "type": "$plugin_type",
    "name": "$plugin_type$split$plugin_name",
    "language": "python2",
    "imports": "requirements.txt",
    "actions": {
        "init": "app.init",
        "start": "app.start",
        "stop": "app.stop"
    },
    "public_actions": [
        "start",
        "stop"
    ],
    "init": "init",
    "call": "start"
}
EOF
    cd $old_pwd
    echo "plugin $plugin_name is created"
}

function help() {
    echo "usage: new_plugin [-h] PLUGIN_NAME PLUGIN_TYPE PLUGIN_VER PLUGIN_PATH ..."
}

function main() {
    local plugin_name="$1"
    local plugin_path="$2"
    local plugin_type="$3"
    local plugin_ver="$4"
    local old_pwd=$(pwd)

    cd $plugin_path
    [ -d "$plugin_name" ] && {
        echo "plugin $plugin_name is exist"
        cd $old_pwd
        exit 1
    }
    cd $old_pwd
    new_plugin "$plugin_name" "$plugin_path" "$plugin_type" "$plugin_ver"
}

target_type=$2
target_ver=$3
target_path=$4
[ -z "$target_type" ] && {
    help 
    exit
}
[ -z "$target_ver" ] && {
    target_ver="0.1.0"
}
[ -z "$target_path" ] && {
    target_path=$(pwd)
}
[ "$1" == "-h" ] && {
    help 
    exit
} || {
    [ "$1" == "" ] && {
        help 
        exit
    }
}

main "$1" "$target_path" "$target_type" "$target_ver"
