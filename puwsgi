#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2015-2018  Terry Xi
# All Rights Reserved.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import subprocess

import argparse

__author__ = 'terry'


class VShell(object):
    """
    命令行基础类
    """

    def __init__(self):
        self.cmd_parser = argparse.ArgumentParser()
        self.sub_cmd = self.cmd_parser.add_subparsers()
        self.prepare()
        self.args = self.cmd_parser.parse_args()

    def has_command(self, command_name):
        return True if self.args.id == str(command_name) else False

    def get_argument(self, store_name):
        if hasattr(self.args, store_name):
            return getattr(self.args, store_name)

    def command(self, command_name, help_text=None):
        # sub-command: install
        sub_command = self.sub_cmd.add_parser(command_name, help=help_text)
        sub_command.set_defaults(id=command_name)

        class SubCommand(object):
            def __init__(self, command):
                self.command = command

            def install_argument(self, args, store_name, default=None, is_bool=False, help_text=None):
                args = [args] if not isinstance(args, list) else args
                if is_bool:
                    if default:
                        action = 'store_false'
                    else:
                        action = 'store_true'
                else:
                    action = 'store'
                self.command.add_argument(*args,
                                          default=default,
                                          dest=store_name,
                                          action=action,
                                          help=help_text)
        return SubCommand(sub_command)

    def prepare(self):
        pass

    def run(self):
        pass


class Uwsgi(VShell):
    def prepare(self):
        super(Uwsgi, self).prepare()
        command = self.command('run', help_text=u'启动uwsgi应用')
        command.install_argument(['--framework'], 'python_framework', default='tornado',
                                 help_text=u'python架构名称')
        command.install_argument(['--server-host'], 'server_host', default='127.0.0.1',
                                 help_text=u'服务地址')
        command.install_argument(['--server-port'], 'server_port', default='8080',
                                 help_text=u'服务端口')
        command.install_argument(['--sock-type'], 'sock_type', default='http',
                                 help_text=u'服务类型')
        command.install_argument(['--crt-file'], 'crt_file', default='',
                                 help_text=u'SSL认证文件')
        command.install_argument(['--key-file'], 'key_file', default='',
                                 help_text=u'SSL认证文件')
        command.install_argument(['--process-number'], 'process_number', default='1',
                                 help_text=u'进程数量')
        command.install_argument(['--thread-number'], 'thread_number', default='100',
                                 help_text=u'线程数量')
        command.install_argument(['--target-file'], 'target_file', default='',
                                 help_text=u'uwsgi应用文件')
        command.install_argument(['--target-app'], 'target_app', default='',
                                 help_text=u'uwsgi应用模块, APP.MODULE')
        return command

    def run(self):
        if self.has_command('run'):
            _python_framework = self.get_argument('python_framework')
            _server_host = self.get_argument('server_host')
            _server_port = self.get_argument('server_port')
            _sock_type = self.get_argument('sock_type')
            _crt_file = self.get_argument('crt_file')
            _key_file = self.get_argument('key_file')
            _process_number = self.get_argument('process_number')
            _thread_number = self.get_argument('thread_number')
            _target_file = self.get_argument('target_file')
            _target_app = self.get_argument('target_app')
            _cmd = 'uwsgi --master'
            if _sock_type == 'http':
                _uwsgi_options = '--http {host}:{port}'.format(host=_server_host,
                                                               port=_server_port)
            elif _sock_type == 'https':
                _uwsgi_options = '--https {host}:{port},{crt},{key}'.format(host=_server_host,
                                                                            port=_server_port,
                                                                            crt=_crt_file,
                                                                            key=_key_file)
            else:
                _uwsgi_options = '--socket {host}:{port}'.format(host=_server_host,
                                                                 port=_server_port)
            _cmd += ' ' + _uwsgi_options
            if _target_file:
                _cmd += ' --wsgi-file ' + _target_file
            elif _target_app:
                mod = __import__(_target_app, globals(), locals(), [_target_app.split('.')[-1]])
                _file_path = '.'.join(mod.__file__.split('.')[0:-1]) + '.py'
                _cmd += ' --wsgi-file ' + _file_path
            if _python_framework == 'tornado':
                _uwsgi_options = '--tornado {thread} --greenlet ' \
                                 '--processes {process}'.format(thread=_thread_number,
                                                                process=_process_number)
            else:
                _uwsgi_options = '--processes {process} --threads {thread}'.format(thread=_thread_number,
                                                                                   process=_process_number)
            _cmd += ' ' + _uwsgi_options
            subprocess.call(_cmd, shell=True)

if __name__ == '__main__':
    shell = Uwsgi()
    shell.run()
